import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as s}from"./app-qOQMBkXC.js";const n={};function t(o,l){return s(),e("div",null,l[0]||(l[0]=[a(`<p>昇腾310B在通用算子覆盖广度上已能满足大多数推理任务，但在以下场景，自定义算子（Custom Op）能显著提升功能完备性与性能确定性：模型含未支持/半支持算子、复合算子频繁导致访存过多、需要业务特化（如阈值/形态学/后处理融合）、或内置实现对特定尺寸/布局性能欠佳。第三章将给出“为什么、怎么做、如何验证与上线”的完整路径。</p><h2 id="算子开发概述" tabindex="-1"><a class="header-anchor" href="#算子开发概述"><span>算子开发概述</span></a></h2><ul><li>目标与收益： <ul><li>功能补齐：覆盖模型图中未支持或语义差异较大的算子；</li><li>性能确定性：融合多算子、减少GM&lt;-&gt;UB搬运与中间落地、利用向量化内核；</li><li>工程可维护：以“算子契约”形式固化输入/输出/属性与边界行为，便于回归与复用。</li></ul></li><li>执行形态： <ul><li>AI Core（推荐）：基于 TBE/TE/TIK 运行于 NPU 核心，适合数值密集型；</li><li>AICPU（可选）：C/C++ 在 AICPU/Host 侧执行，适合控制流/轻量处理（注意H2D/D2H成本）。</li></ul></li><li>产物要素： <ul><li>算子描述（op info/proto）：声明 op_type、inputs/outputs、dtype_format 组合、属性与形状推断；</li><li>算子实现（Kernel）：TE/TIK 计算+调度或 AICPU C++ 实现；</li><li>注册与打包：产物按规范放入 OPP 目录，ATC/Runtime 可发现与加载。</li></ul></li></ul><h2 id="开发的理论基础" tabindex="-1"><a class="header-anchor" href="#开发的理论基础"><span>开发的理论基础</span></a></h2><ol><li>硬件与存储层次：</li></ol><ul><li>GM（Global Memory）：容量大、带宽高；</li><li>UB（Unified Buffer）：片上高速缓存，容量有限；</li><li>DMA：GM↔UB 的数据搬运，偏好大块连续传输；</li><li>向量/标量单元：支持vadd/vmul/vmax等，需数据对齐（常见16/32）。</li></ul><ol start="2"><li>计算表达与调度：</li></ol><ul><li>TE（Tensor Expression）描述计算公式；Schedule 负责 tile/并行/向量化/缓存；</li><li>TIK 提供更贴近硬件的 DSL，便于精细控制 DMA 与 UB 管理；</li><li>目标：以较少的GM往返在UB内完成尽可能多的计算，提升算子算子效率与吞吐。</li></ul><ol start="3"><li>算子契约（Operator Contract）：</li></ol><ul><li>输入/输出张量的 shape、dtype、layout（NCHW/NC1HWC0等）、属性（如alpha、mode）；</li><li>广播与对齐规则、边界行为（溢出/饱和/舍入）、精度策略（FP16/FP32混合）；</li><li>动态shape与静态shape：实现需覆盖契约内的形状组合并保证UB不溢出。</li></ul><ol start="4"><li>数值与精度：</li></ol><ul><li>FP16 常用于 310B 推理通路；必要时在关键步骤采用临时 FP32 计算再回写；</li><li>误差控制：选择合适的舍入策略，避免饱和/下溢导致NAN/INF。</li></ul><h2 id="开发流程-ai-core-路线" tabindex="-1"><a class="header-anchor" href="#开发流程-ai-core-路线"><span>开发流程（AI Core 路线）</span></a></h2><ol><li>环境准备与约束</li></ol><ul><li>安装 CANN/Toolkit 并确认 <code>atc --version</code> 正常；</li><li>设置环境变量：<code>ASCEND_INSTALL_PATH</code>、<code>ASCEND_OPP_PATH</code>；</li><li>目标芯片：<code>soc_version=Ascend310B</code>；优先使用 FP16 与硬件友好布局（如NC1HWC0）。</li></ul><ol start="2"><li>定义算子信息（op info/proto）</li></ol><ul><li>声明 <code>op_type</code>、inputs/outputs 名称与数量、可支持的 <code>dtype_format</code> 组合、属性与默认值；</li><li>提供形状推断规则（静态或依据属性/输入维度计算）。</li></ul><ol start="3"><li>编写算子实现（TE/TBE/TIK）</li></ol><ul><li>计算表达（示例：Add+ReLU 融合伪代码）：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># y = relu(x1 + x2)</span></span>
<span class="line"><span>import te.lang.cce as tbe</span></span>
<span class="line"><span>from te import tvm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def add_relu_compute(x1, x2):</span></span>
<span class="line"><span>		y = tbe.vadd(x1, x2)</span></span>
<span class="line"><span>		z = tbe.vmaxs(y, tvm.const(0.0, x1.dtype))</span></span>
<span class="line"><span>		return z</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调度要点： <ul><li>Tile 到 UB 容量可承载的块大小；</li><li>连续向量访问，减少非对齐；</li><li>合并搬运，避免频繁小块 DMA；</li><li>小尺寸路径避免调度开销超过计算开销。</li></ul></li></ul><ol start="4"><li>编译与注册</li></ol><ul><li>使用 Toolkit 提供的编译入口生成 kernel 与元数据；</li><li>将实现与描述文件放入 <code>ASCEND_OPP_PATH</code> 下 custom 目录（如 <code>op_impl/custom/ai_core/tbe</code>、<code>op_proto/custom</code>）。</li></ul><ol start="5"><li>与 ATC 集成</li></ol><ul><li>转换模型时指定 <code>--soc_version=Ascend310B</code>；</li><li>确保 OPP 路径可被 ATC 读取，必要时调整 <code>--op_select_implmode</code>；</li><li>转换日志中应能看到自定义算子被匹配与编译。</li></ul><ol start="6"><li>运行时部署</li></ol><ul><li>目标环境包含同版本 OPP（含 custom 产物）；</li><li>设置环境变量使 Runtime 能定位到自定义实现；</li><li>按常规 ACL 流程加载 OM 并执行推理。</li></ul><ol start="7"><li>验证与度量</li></ol><ul><li>功能：与 NumPy/ONNX 参考实现对齐，随机多组张量比较（平均绝对/相对误差、边界样本）；</li><li>性能：Warmup≥3 次，采样≥50 次，统计 avg/p95/FPS；</li><li>资源：Profiling 检查 MemCopy 占比、Kernel 占比、Idle；</li><li>兼容：覆盖不同 shape/dtype/layout 组合。</li></ul><ol start="8"><li>打包与版本化</li></ol><ul><li>输出 <code>op_contract.yaml</code>（契约）与 <code>benchmark.json</code>（性能）；</li><li>目录建议：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>op_pkg/&lt;op_type&gt;/&lt;version&gt;/</span></span>
<span class="line"><span>	├─ op_proto/custom/</span></span>
<span class="line"><span>	├─ op_impl/custom/ai_core/tbe/</span></span>
<span class="line"><span>	├─ tests/</span></span>
<span class="line"><span>	└─ docs/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见问题与排查" tabindex="-1"><a class="header-anchor" href="#常见问题与排查"><span>常见问题与排查</span></a></h2><ul><li>ATC 提示 Unsupported Op：检查 op 描述是否生效、路径与 <code>soc_version</code> 是否匹配；</li><li>运行时回退（fallback）：确认 <code>dtype_format</code> 覆盖到当前张量组合；</li><li>性能无提升：检查是否出现额外 layout 转换、tile 过小造成 DMA 频繁；</li><li>精度异常：核对归一化/广播规则、溢出与舍入策略，必要时局部切 FP32；</li><li>动态 shape OOM：缩小 tile 或分桶处理，保证 UB 与工作区不溢出。</li></ul><h2 id="章节小结" tabindex="-1"><a class="header-anchor" href="#章节小结"><span>章节小结</span></a></h2><p>自定义算子是 310B 场景下实现“功能补齐与性能确定性”的关键手段。遵循“明确契约 → 正确调度 → 可观测验证 → 规范打包”的路径，选择计算/访存比例合适、出现频繁的目标起步，先易后难、以基线与回归保障质量与收益的可持续。</p><h2 id="实践任务" tabindex="-1"><a class="header-anchor" href="#实践任务"><span>实践任务</span></a></h2><ol><li>选择你项目中的一个复合算子（例如归一化+阈值），写出算子契约草案（IO/attr/dtype_format/边界）。</li><li>基于 TE 写出该算子的计算表达伪代码，并说明预期的 tile 与向量化策略。</li><li>在开发环境完成编译注册，将产物放入 OPP custom 目录并用一个最小模型验证 ATC 识别。</li><li>设计功能与性能验证脚本：随机张量对齐、Warmup/采样策略、输出 avg/p95 与资源占比。</li><li>生成 <code>op_contract.yaml</code> 与 <code>benchmark.json</code>，并归档到 <code>op_pkg/&lt;op_type&gt;/&lt;version&gt;/</code>。</li></ol>`,38)]))}const r=i(n,[["render",t],["__file","chapter3.html.vue"]]),p=JSON.parse('{"path":"/book/chapter3.html","title":"第3讲：昇腾310B算子开发基础","lang":"zh-cn","frontmatter":{"title":"第3讲：昇腾310B算子开发基础","author":["周贤中"],"date":"2025-09-04T00:00:00.000Z","subject":"Markdown","keywords":["边缘计算","算子"],"lang":"zh-cn"},"headers":[{"level":2,"title":"算子开发概述","slug":"算子开发概述","link":"#算子开发概述","children":[]},{"level":2,"title":"开发的理论基础","slug":"开发的理论基础","link":"#开发的理论基础","children":[]},{"level":2,"title":"开发流程（AI Core 路线）","slug":"开发流程-ai-core-路线","link":"#开发流程-ai-core-路线","children":[]},{"level":2,"title":"常见问题与排查","slug":"常见问题与排查","link":"#常见问题与排查","children":[]},{"level":2,"title":"章节小结","slug":"章节小结","link":"#章节小结","children":[]},{"level":2,"title":"实践任务","slug":"实践任务","link":"#实践任务","children":[]}],"git":{"createdTime":1752741756000,"updatedTime":1758457965000,"contributors":[{"name":"zhouxzh","username":"zhouxzh","email":"zhouxzh@gdut.edu.cn","commits":3,"url":"https://github.com/zhouxzh"},{"name":"idsefa","username":"idsefa","email":"hhc92611@gmail.com","commits":1,"url":"https://github.com/idsefa"},{"name":"Xianzhong Zhou","username":"Xianzhong Zhou","email":"zhouxzh@gdut.edu.cn","commits":2,"url":"https://github.com/Xianzhong Zhou"}]},"readingTime":{"minutes":4.92,"words":1477},"filePathRelative":"book/chapter3.md","localizedDate":"2025年9月4日"}');export{r as comp,p as data};
