import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as n,o as e}from"./app-qOQMBkXC.js";const a={};function t(r,i){return e(),l("div",null,i[0]||(i[0]=[n(`<h1 id="案例1-智能人脸识别打卡机" tabindex="-1"><a class="header-anchor" href="#案例1-智能人脸识别打卡机"><span>案例1：智能人脸识别打卡机</span></a></h1><hr><h2 id="项目简介" tabindex="-1"><a class="header-anchor" href="#项目简介"><span>项目简介</span></a></h2><p>本项目旨在利用昇腾310B的强大AI算力，构建一个功能完整、响应迅速的智能人脸识别打卡系统。系统通过USB摄像头实时捕捉视频流，检测画面中的人脸，并与预先注册的员工/学生人脸数据库进行比对，完成身份验证和自动记录考勤。</p><p>该项目不仅是一个功能性的应用，更是一个端到端的AI实践案例，涵盖了从硬件选型、软件环境搭建、数据准备、模型训练与优化，到最终在边缘设备上部署的全过程。</p><h2 id="内容大纲" tabindex="-1"><a class="header-anchor" href="#内容大纲"><span>内容大纲</span></a></h2><h3 id="硬件准备" tabindex="-1"><a class="header-anchor" href="#硬件准备"><span>硬件准备</span></a></h3><ul><li><strong>核心计算单元</strong>: 昇腾310B开发者套件</li><li><strong>图像采集</strong>: USB摄像头 (推荐罗技C920或同等规格)</li><li><strong>显示设备 (可选)</strong>: HDMI显示器，用于实时预览或UI展示</li><li><strong>外设</strong>: 键盘、鼠标</li><li><strong>电源</strong>: 为昇腾310B开发板提供稳定供电</li><li><strong>连接线</strong>: HDMI线, USB-C数据线等</li></ul><p><em>附：硬件连接示意图</em></p><blockquote><p>(此处可插入一张图片，清晰展示所有硬件的连接方式)</p></blockquote><h3 id="软件环境" tabindex="-1"><a class="header-anchor" href="#软件环境"><span>软件环境</span></a></h3><ul><li><strong>操作系统</strong>: Ubuntu 20.04 或 openEuler</li><li><strong>CANN版本</strong>: 7.0或更高</li><li><strong>Python版本</strong>: 3.8.x</li><li><strong>主要依赖库</strong>: <ul><li><code>opencv-python</code>: 用于图像和视频处理</li><li><code>numpy</code>: 用于数值计算</li><li><code>scikit-learn</code>: 用于评估模型性能</li><li><code>onnxruntime</code>: 用于运行ONNX模型</li><li><code>PyQt5</code> (可选): 用于构建图形用户界面</li></ul></li></ul><p><em>附：一键安装环境脚本 (<code>install_env.sh</code>)</em></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 示例脚本</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python3-pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python3-opencv</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> numpy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> scikit-learn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> onnxruntime</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ... 其他依赖安装命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据集准备" tabindex="-1"><a class="header-anchor" href="#数据集准备"><span>数据集准备</span></a></h3><ul><li><strong>数据集来源</strong>: <ol><li><strong>公开数据集</strong>: 如LFW (Labeled Faces in the Wild)、CASIA-WebFace等。</li><li><strong>自建数据集</strong>: 推荐！使用摄像头为每位用户（员工/学生）拍摄多张、多角度、不同光照和表情的人脸照片。</li></ol></li><li><strong>数据组织结构</strong>:<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>datasets/</span></span>
<span class="line"><span>├── zhang_san/</span></span>
<span class="line"><span>│   ├── 001.jpg</span></span>
<span class="line"><span>│   ├── 002.jpg</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── li_si/</span></span>
<span class="line"><span>│   ├── 001.jpg</span></span>
<span class="line"><span>│   ├── 002.jpg</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>└── ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>预处理脚本 (<code>preprocess.py</code>)</strong>: <ul><li>人脸检测与对齐</li><li>图像增强（旋转、裁剪、调整亮度等）</li><li>划分训练集和验证集</li></ul></li></ul><h3 id="模型训练" tabindex="-1"><a class="header-anchor" href="#模型训练"><span>模型训练</span></a></h3><ul><li><strong>模型选择</strong>: <ul><li><strong>人脸检测</strong>: MTCNN 或 RetinaFace</li><li><strong>人脸识别</strong>: ArcFace, CosFace, 或 MobileFaceNet (推荐，因其轻量高效)</li></ul></li><li><strong>训练流程</strong>: <ol><li>使用预处理好的数据集进行模型训练。</li><li>调整超参数（学习率、批大小等）以获得最佳性能。</li><li>在验证集上评估模型准确率、召回率等指标。</li></ol></li><li><strong>模型导出</strong>: 将训练好的PyTorch或TensorFlow模型转换为昇腾亲和的ONNX格式。</li></ul><h3 id="模型部署" tabindex="-1"><a class="header-anchor" href="#模型部署"><span>模型部署</span></a></h3><ul><li><strong>模型转换</strong>: 使用ATC (Ascend Tensor Compiler) 工具将ONNX模型转换为昇腾310B支持的<code>.om</code>离线模型。<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">atc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --model=./face_recognition.onnx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --framework=5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --output=./face_recognition</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --input_format=NCHW</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --input_shape=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;data:1,3,112,112&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --soc_version=Ascend310B1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>部署代码 (<code>main.py</code>)</strong>: <ol><li>初始化CANN和ACL (Ascend Computing Language) 资源。</li><li>加载<code>.om</code>离线模型。</li><li>循环读取摄像头帧。</li><li>对每一帧进行人脸检测和识别推理。</li><li>将识别结果与数据库比对，输出姓名。</li><li>在画面上绘制矩形框和姓名，并记录打卡时间。</li></ol></li></ul><h3 id="_3d打印结构件" tabindex="-1"><a class="header-anchor" href="#_3d打印结构件"><span>3D打印结构件</span></a></h3><p>为了方便地将摄像头固定在合适的位置，我们设计了专用的摄像头支架和设备保护外壳。</p><ul><li><strong>文件列表</strong>: <ul><li><code>camera_holder.stl</code>: 摄像头支架模型文件</li><li><code>device_case.stl</code>: 设备外壳模型文件</li></ul></li><li><strong>打印建议</strong>: <ul><li><strong>材料</strong>: PLA 或 PETG</li><li><strong>层高</strong>: 0.2mm</li><li><strong>填充率</strong>: 20%</li></ul></li></ul><h3 id="用户手册" tabindex="-1"><a class="header-anchor" href="#用户手册"><span>用户手册</span></a></h3><ol><li><strong>硬件组装</strong>: 参照<code>2.1</code>节的连接图连接好所有硬件。</li><li><strong>环境配置</strong>: 运行<code>install_env.sh</code>脚本安装所有软件依赖。</li><li><strong>人脸注册</strong>: 运行<code>register_face.py</code>脚本，根据提示输入姓名，并拍摄多张人脸照片进行注册。</li><li><strong>启动系统</strong>: 运行<code>main.py</code>启动人脸识别打卡程序。</li><li><strong>查看记录</strong>: 打卡记录将保存在<code>attendance.csv</code>文件中。</li></ol><h2 id="源代码" tabindex="-1"><a class="header-anchor" href="#源代码"><span>源代码</span></a></h2><blockquote><p>(此处未来可替换为GitHub仓库链接或详细的文件树)</p></blockquote><h2 id="效果演示" tabindex="-1"><a class="header-anchor" href="#效果演示"><span>效果演示</span></a></h2><blockquote><p>(此处可插入系统运行时的截图或GIF动图，例如摄像头实时识别人脸的画面)</p></blockquote>`,29)]))}const d=s(a,[["render",t],["__file","case1.html.vue"]]),p=JSON.parse('{"path":"/experiment/case1.html","title":"案例1：智能人脸识别打卡机","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"项目简介","slug":"项目简介","link":"#项目简介","children":[]},{"level":2,"title":"内容大纲","slug":"内容大纲","link":"#内容大纲","children":[{"level":3,"title":"硬件准备","slug":"硬件准备","link":"#硬件准备","children":[]},{"level":3,"title":"软件环境","slug":"软件环境","link":"#软件环境","children":[]},{"level":3,"title":"数据集准备","slug":"数据集准备","link":"#数据集准备","children":[]},{"level":3,"title":"模型训练","slug":"模型训练","link":"#模型训练","children":[]},{"level":3,"title":"模型部署","slug":"模型部署","link":"#模型部署","children":[]},{"level":3,"title":"3D打印结构件","slug":"_3d打印结构件","link":"#_3d打印结构件","children":[]},{"level":3,"title":"用户手册","slug":"用户手册","link":"#用户手册","children":[]}]},{"level":2,"title":"源代码","slug":"源代码","link":"#源代码","children":[]},{"level":2,"title":"效果演示","slug":"效果演示","link":"#效果演示","children":[]}],"git":{"createdTime":1756997745000,"updatedTime":1758460961000,"contributors":[{"name":"zhouxzh","username":"zhouxzh","email":"zhouxzh@gdut.edu.cn","commits":1,"url":"https://github.com/zhouxzh"},{"name":"Xianzhong Zhou","username":"Xianzhong Zhou","email":"zhouxzh@gdut.edu.cn","commits":1,"url":"https://github.com/Xianzhong Zhou"}]},"readingTime":{"minutes":3.47,"words":1040},"filePathRelative":"experiment/case1.md","localizedDate":"2025年9月4日"}');export{d as comp,p as data};
