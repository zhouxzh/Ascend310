import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as l}from"./app-qOQMBkXC.js";const r={};function i(s,t){return l(),e("div",null,t[0]||(t[0]=[a(`<h2 id="章节总览" tabindex="-1"><a class="header-anchor" href="#章节总览"><span>章节总览</span></a></h2><p>从单机多模型到工程化高可用体系：进程与线程模型、调度与优先级、配置与热更新、日志指标监控、故障感知和自愈、版本交付与灰度回滚。核心目标：让推理系统具备“可观察、可控、可自愈、可演进”。</p><h2 id="部署形态与演进路线" tabindex="-1"><a class="header-anchor" href="#部署形态与演进路线"><span>部署形态与演进路线</span></a></h2><table><thead><tr><th>阶段</th><th>形态</th><th>特征</th><th>触发升级条件</th></tr></thead><tbody><tr><td>POC</td><td>单进程</td><td>简单，耦合高</td><td>模型增加/稳定性需求</td></tr><tr><td>Beta</td><td>多进程模块化</td><td>隔离故障</td><td>资源利用不均/需要扩展</td></tr><tr><td>Prod 基础</td><td>本地 RPC 服务化</td><td>清晰 API 契约</td><td>多板协同/多客户端</td></tr><tr><td>Prod 进阶</td><td>容器化 + 编排</td><td>可滚动更新</td><td>大规模交付/远程运维</td></tr><tr><td>Edge 集群</td><td>中心调度 + 远程控制</td><td>全局负载均衡</td><td>弹性/集中监控</td></tr></tbody></table><p>进程边界建议：<code>capture</code>、<code>infer</code>、<code>postprocess</code>、<code>upload</code>、<code>monitor</code>、<code>watchdog</code>。隔离崩溃影响并实现差异化资源限额（CPU亲和 + 内存限制）。</p><h2 id="进程与线程模型设计" tabindex="-1"><a class="header-anchor" href="#进程与线程模型设计"><span>进程与线程模型设计</span></a></h2><h3 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理"><span>基本原理</span></a></h3><ol><li>最小可信核心：推理执行逻辑 + 输入输出队列；</li><li>外围增强：监控、日志聚合、健康探针不影响核心路径。</li></ol><h3 id="线程池建议" tabindex="-1"><a class="header-anchor" href="#线程池建议"><span>线程池建议</span></a></h3><table><thead><tr><th>线程组</th><th>职责</th><th>数量估算</th></tr></thead><tbody><tr><td>Capture</td><td>采集与解码</td><td>摄像头数 (N)</td></tr><tr><td>Preprocess</td><td>Resize/Normalize</td><td>ceil(N * frame_rate * pre_time / CPU核)</td></tr><tr><td>Inference</td><td>调用 ACL</td><td>通常 1~2 (避免过度上下文切换)</td></tr><tr><td>Postprocess</td><td>NMS/Decode</td><td>与 Inference 分离防止阻塞</td></tr><tr><td>Upload</td><td>事件上报</td><td>1~2</td></tr><tr><td>Monitor</td><td>指标收集</td><td>1</td></tr></tbody></table><p>CPU 亲和：将推理线程绑定至高性能核心，避免迁移污染缓存；预处理线程放置在剩余核心以平衡。</p><h2 id="任务调度与优先级控制" tabindex="-1"><a class="header-anchor" href="#任务调度与优先级控制"><span>任务调度与优先级控制</span></a></h2><p>多级队列：RealtimeQueue（最大长度 L1，满则丢弃旧帧）、NormalQueue（批处理）、BackgroundQueue（低优先日志/统计）。 令牌桶限速：对外部请求（远程推理 API）采取令牌桶控制 QPS；令牌不足则延迟或返回限流错误码。 超时策略：当帧在队列停留超过阈值（如 2 × 平均推理时延）标记过期，进入降级路径（丢弃或简化处理）。</p><h2 id="配置管理与热更新" tabindex="-1"><a class="header-anchor" href="#配置管理与热更新"><span>配置管理与热更新</span></a></h2><p>配置划分：</p><table><thead><tr><th>类别</th><th>内容</th><th>更新频率</th><th>是否热更新</th></tr></thead><tbody><tr><td>资源</td><td>线程数、队列长度</td><td>低</td><td>是</td></tr><tr><td>模型</td><td>路径、版本、精度模式</td><td>中</td><td>滚动加载</td></tr><tr><td>策略</td><td>阈值、降级条件</td><td>中高</td><td>是</td></tr><tr><td>安全</td><td>Token、公钥</td><td>低</td><td>非热（需重启）</td></tr></tbody></table><p>热更新流程：文件变更 → 校验 schema → 写入新 shadow 副本 → 原子指针切换（正在执行任务继续使用旧配置直至完成）。</p><h2 id="日志体系与追踪" tabindex="-1"><a class="header-anchor" href="#日志体系与追踪"><span>日志体系与追踪</span></a></h2><p>结构化字段：<code>ts, level, module, thread, trace_id, latency_ms, event</code>。 Trace ID：跨进程通过 IPC/RPC header 传递；用于从采集到上报的全链路追踪。 日志级别动态调整：接收管理命令（Unix Domain Socket / 本地控制端口）将模块日志级别置 DEBUG 进行临时诊断。 切割策略：按大小（100MB）或按时间（小时），超限自动压缩归档；保留策略 N 天 + 关键事件永久。</p><h2 id="指标监控与探针" tabindex="-1"><a class="header-anchor" href="#指标监控与探针"><span>指标监控与探针</span></a></h2><p>探针：</p><ul><li>Liveness：进程是否在运行（看门狗检查心跳文件更新时间）。</li><li>Readiness：模型是否加载完成 + 队列是否低压（长度 &lt; 阈值）。 指标暴露格式：<code>/metrics</code> Prometheus 文本：<code>model_latency_bucket{le=&quot;...&quot;} 123</code>。</li></ul><p>核心指标分类：</p><table><thead><tr><th>分类</th><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>性能</td><td>model_latency_ms (histogram)</td><td>推理时延分位</td></tr><tr><td>吞吐</td><td>frames_processed_total</td><td>每秒增量</td></tr><tr><td>背压</td><td>queue_len / queue_wait_ms</td><td>排队深度</td></tr><tr><td>资源</td><td>npu_util / cpu_util / mem_bytes</td><td>资源利用率</td></tr><tr><td>可靠性</td><td>crash_count / restart_count</td><td>重启频次</td></tr><tr><td>热</td><td>temperature_c</td><td>温度曲线</td></tr><tr><td>质量</td><td>accuracy_drift</td><td>精度回归差异</td></tr></tbody></table><h2 id="高可用与自愈机制" tabindex="-1"><a class="header-anchor" href="#高可用与自愈机制"><span>高可用与自愈机制</span></a></h2><p>看门狗：子进程每隔 T 秒写心跳文件；超时→发送 SIGTERM→宽限期→SIGKILL→重启并记录事件。</p><p>分级降级：</p><ol><li>软降级：减小输入分辨率 / 降 FPS / 关闭次要模型；</li><li>硬降级：仅保留关键检测模型；</li><li>熔断：持续高温或资源不可用 → 暂停推理，仅缓存数据。 状态机：NORMAL → DEGRADED → CRITICAL → RECOVERY → NORMAL。</li></ol><h2 id="异常分类与处理矩阵" tabindex="-1"><a class="header-anchor" href="#异常分类与处理矩阵"><span>异常分类与处理矩阵</span></a></h2><table><thead><tr><th>类别</th><th>触发信号</th><th>初步动作</th><th>深度动作</th><th>记录</th></tr></thead><tbody><tr><td>输入</td><td>空帧/花屏</td><td>丢弃+计数</td><td>摄像头重置</td><td>anomaly.log</td></tr><tr><td>资源</td><td>OOM 风险</td><td>Dump 内存</td><td>重建上下文</td><td>memory.log</td></tr><tr><td>性能</td><td>P95 飙升</td><td>Profiling on</td><td>降级策略</td><td>perf.log</td></tr><tr><td>硬件</td><td>温度高</td><td>降载</td><td>风扇策略/报警</td><td>thermal.log</td></tr><tr><td>数据</td><td>精度偏移</td><td>Dump 样本</td><td>模型回滚</td><td>quality.log</td></tr></tbody></table><h2 id="版本、灰度与回滚" tabindex="-1"><a class="header-anchor" href="#版本、灰度与回滚"><span>版本、灰度与回滚</span></a></h2><p>镜像标签：<code>&lt;model_version&gt;-&lt;git_sha&gt;-&lt;date&gt;</code>；包含 manifest：模型 hash、配置 hash、构建环境。 灰度策略：按设备集合（Region/Batch）逐步扩大；监控关键指标偏差（时延/Crash）超过阈值立即回滚。 回滚：保留上一稳定版本镜像与配置快照；执行原子 symbolic link 切换。</p><h2 id="安全与访问控制" tabindex="-1"><a class="header-anchor" href="#安全与访问控制"><span>安全与访问控制</span></a></h2><p>最小权限：运行用户无 sudo；只读挂载代码与模型目录，写权限仅日志与缓存路径。 配置签名：管理端生成签名，客户端部署时校验防篡改。 远程指令：白名单 + 签名校验；禁止执行任意 shell。</p><h2 id="审计与合规" tabindex="-1"><a class="header-anchor" href="#审计与合规"><span>审计与合规</span></a></h2><p>记录：运维操作、配置变更、模型替换、异常重启；保存 JSON Line 格式，便于集中检索。设定留存策略和脱敏规则（剔除用户标识）。</p><h2 id="示例-两模型多进程结构" tabindex="-1"><a class="header-anchor" href="#示例-两模型多进程结构"><span>示例：两模型多进程结构</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[capture] -&gt; shm -&gt; [infer_detect] -&gt; mq -&gt; [post_detect]</span></span>
<span class="line"><span>											  \\-&gt; [infer_classify] -&gt; [post_classify]</span></span>
<span class="line"><span>	 |                                                |</span></span>
<span class="line"><span> [monitor] &lt;------------------------------------------</span></span>
<span class="line"><span> [watchdog] (supervisor all processes)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>共享内存（shm）用于高带宽帧传输，消息队列（mq）传递元数据（指针、时间戳、追踪 ID）。</p><h2 id="章节小结" tabindex="-1"><a class="header-anchor" href="#章节小结"><span>章节小结</span></a></h2><p>通过模块化、可观察化与自动化自愈策略，边缘推理系统可以在资源约束与环境不稳定条件下提供接近云端的可靠性。重点：明确边界、度量驱动、降级可逆、版本可控。</p><h2 id="实践任务" tabindex="-1"><a class="header-anchor" href="#实践任务"><span>实践任务</span></a></h2><ol><li>设计多进程与队列拓扑图（ASCII）。</li><li>编写队列监控小工具：输出队列长度与平均等待时长。</li><li>实现一个看门狗脚本（检测心跳文件时间差 &gt; 阈值则重启模拟进程）。</li><li>制作灰度发布计划（分三阶段 + 指标 + 回滚条件）。</li><li>输出降级状态机定义（含转移条件）。</li></ol>`,43)]))}const o=d(r,[["render",i],["__file","chapter6.html.vue"]]),c=JSON.parse('{"path":"/book/chapter6.html","title":"第6讲：系统工程与高可用部署","lang":"zh-cn","frontmatter":{"title":"第6讲：系统工程与高可用部署","author":["周贤中"],"date":"2025-09-04T00:00:00.000Z","subject":"Markdown","keywords":["系统工程","调度","监控","高可用","可靠性","配置管理"],"lang":"zh-cn"},"headers":[{"level":2,"title":"章节总览","slug":"章节总览","link":"#章节总览","children":[]},{"level":2,"title":"部署形态与演进路线","slug":"部署形态与演进路线","link":"#部署形态与演进路线","children":[]},{"level":2,"title":"进程与线程模型设计","slug":"进程与线程模型设计","link":"#进程与线程模型设计","children":[{"level":3,"title":"基本原理","slug":"基本原理","link":"#基本原理","children":[]},{"level":3,"title":"线程池建议","slug":"线程池建议","link":"#线程池建议","children":[]}]},{"level":2,"title":"任务调度与优先级控制","slug":"任务调度与优先级控制","link":"#任务调度与优先级控制","children":[]},{"level":2,"title":"配置管理与热更新","slug":"配置管理与热更新","link":"#配置管理与热更新","children":[]},{"level":2,"title":"日志体系与追踪","slug":"日志体系与追踪","link":"#日志体系与追踪","children":[]},{"level":2,"title":"指标监控与探针","slug":"指标监控与探针","link":"#指标监控与探针","children":[]},{"level":2,"title":"高可用与自愈机制","slug":"高可用与自愈机制","link":"#高可用与自愈机制","children":[]},{"level":2,"title":"异常分类与处理矩阵","slug":"异常分类与处理矩阵","link":"#异常分类与处理矩阵","children":[]},{"level":2,"title":"版本、灰度与回滚","slug":"版本、灰度与回滚","link":"#版本、灰度与回滚","children":[]},{"level":2,"title":"安全与访问控制","slug":"安全与访问控制","link":"#安全与访问控制","children":[]},{"level":2,"title":"审计与合规","slug":"审计与合规","link":"#审计与合规","children":[]},{"level":2,"title":"示例：两模型多进程结构","slug":"示例-两模型多进程结构","link":"#示例-两模型多进程结构","children":[]},{"level":2,"title":"章节小结","slug":"章节小结","link":"#章节小结","children":[]},{"level":2,"title":"实践任务","slug":"实践任务","link":"#实践任务","children":[]}],"git":{"createdTime":1752741756000,"updatedTime":1758457965000,"contributors":[{"name":"zhouxzh","username":"zhouxzh","email":"zhouxzh@gdut.edu.cn","commits":2,"url":"https://github.com/zhouxzh"},{"name":"idsefa","username":"idsefa","email":"hhc92611@gmail.com","commits":1,"url":"https://github.com/idsefa"},{"name":"Xianzhong Zhou","username":"Xianzhong Zhou","email":"zhouxzh@gdut.edu.cn","commits":1,"url":"https://github.com/Xianzhong Zhou"}]},"readingTime":{"minutes":5.32,"words":1595},"filePathRelative":"book/chapter6.md","localizedDate":"2025年9月4日"}');export{o as comp,c as data};
