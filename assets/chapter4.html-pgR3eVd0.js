import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as s}from"./app-qOQMBkXC.js";const l={};function d(i,e){return s(),a("div",null,e[0]||(e[0]=[n(`<h2 id="章节总览" tabindex="-1"><a class="header-anchor" href="#章节总览"><span>章节总览</span></a></h2><p>本章以“统一流程 → 四类典型任务（分类/检测/OCR/NLP）→ 多模型 Pipeline → 工程化目录与脚本 → 性能基线采集 → 问题诊断”逻辑展开，强调“可复现、可量化、可演进”的部署范式。所有示例策略均可推广到后续复杂场景（多输入、多分辨率、流式/批式混合）。</p><h2 id="统一部署工作流与契约化" tabindex="-1"><a class="header-anchor" href="#统一部署工作流与契约化"><span>统一部署工作流与契约化</span></a></h2><p>标准六步：模型选择 → 框架导出 ONNX → ATC 转换（参数冻结）→ 推理引擎封装（I/O 契约）→ 运行形态编排 → 验证（精度 + 性能）。 核心产物：</p><table><thead><tr><th>文件</th><th>作用</th></tr></thead><tbody><tr><td>export.py</td><td>导出 &amp; 简化 ONNX</td></tr><tr><td>atc.sh</td><td>标准化转换命令</td></tr><tr><td>config.yaml</td><td>输入/归一化/颜色/阈值</td></tr><tr><td>signature.json</td><td>模型输入输出字段与 dtype</td></tr><tr><td>metrics.json</td><td>性能统计（avg/p95/memory）</td></tr></tbody></table><p>输入预处理必须模块化，业务层仅提供原始图像对象；可在 AIPP 中下沉部分（色彩空间、均值/方差），减少 Host 侧拷贝和转换。</p><h2 id="图像分类-resnet-mobilenet" tabindex="-1"><a class="header-anchor" href="#图像分类-resnet-mobilenet"><span>图像分类：ResNet / MobileNet</span></a></h2><h3 id="模型导出" tabindex="-1"><a class="header-anchor" href="#模型导出"><span>模型导出</span></a></h3><p>PyTorch → ONNX：<code>torch.onnx.export(model, dummy, opset_version=13, dynamic_axes=None)</code>；确保去掉训练专属层（Dropout, BN 置 eval）。</p><h3 id="预处理一致性" tabindex="-1"><a class="header-anchor" href="#预处理一致性"><span>预处理一致性</span></a></h3><ol><li>Resize: 保持短边 256 → CenterCrop 224。</li><li>Normalize: mean/std 与训练保持一致。</li><li>Layout: NCHW；若原始图像为 HWC(RGB) → 转 BGR/或保持一致并在 config 标记。</li></ol><h3 id="转换要点" tabindex="-1"><a class="header-anchor" href="#转换要点"><span>转换要点</span></a></h3><p><code>--precision_mode=allow_fp32_to_fp16</code>；若需 INT8：先做离线标定导出校准表，再加量化参数。</p><h3 id="推理后处理" tabindex="-1"><a class="header-anchor" href="#推理后处理"><span>推理后处理</span></a></h3><p>Softmax → ArgTopK → LabelMap。为避免数值不稳定：FP16 logits 可先转 FP32 再 softmax。</p><h3 id="性能采集" tabindex="-1"><a class="header-anchor" href="#性能采集"><span>性能采集</span></a></h3><p>Warmup 5 次，采集 100 次：记录 avg, p50, p95, max；统计预处理耗时占比：<code>pre_ms / total_ms</code>，超过 25% 提示 AIPP 下沉或批处理优化。</p><h2 id="目标检测-yolo-fasterrcnn" tabindex="-1"><a class="header-anchor" href="#目标检测-yolo-fasterrcnn"><span>目标检测：YOLO / FasterRCNN</span></a></h2><h3 id="输入尺寸与-letterbox" tabindex="-1"><a class="header-anchor" href="#输入尺寸与-letterbox"><span>输入尺寸与 Letterbox</span></a></h3><p>Letterbox 使图像等比例缩放 + 填充，保持方形输入。部署需重现训练阶段相同逻辑，否则框坐标偏移。保存 <code>scale</code> 与 <code>pad</code> 用于反算原始坐标。</p><h3 id="多输出解析" tabindex="-1"><a class="header-anchor" href="#多输出解析"><span>多输出解析</span></a></h3><p>YOLOv5s OM 输出通常包含一个或多个特征拼接张量：<code>(num_boxes, attributes)</code>；后处理：过滤 conf &gt; 阈值 → 按类合并 → NMS。</p><h3 id="nms-实现决策" tabindex="-1"><a class="header-anchor" href="#nms-实现决策"><span>NMS 实现决策</span></a></h3><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>CPU Python</td><td>简单</td><td>高开销，多框场景慢</td></tr><tr><td>CPU C++ SIMD</td><td>中等复杂</td><td>仍需 D2H 拷贝</td></tr><tr><td>Device Kernel</td><td>减少拷贝</td><td>实现复杂</td></tr><tr><td>先评估 D2H + CPU NMS 占比，&gt;15% 再考虑下沉。</td><td></td><td></td></tr></tbody></table><h3 id="动态尺度支持" tabindex="-1"><a class="header-anchor" href="#动态尺度支持"><span>动态尺度支持</span></a></h3><p>转换阶段可生成多尺度 OM 或使用动态 shape；推荐：统计输入分辨率 → 选择 3 桶（640/704/768）提升命中率。</p><h2 id="ocr-文本检测-识别-pipeline" tabindex="-1"><a class="header-anchor" href="#ocr-文本检测-识别-pipeline"><span>OCR：文本检测 + 识别 Pipeline</span></a></h2><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h3><p>检测模型（DB） → 文本框多边形 → 透视裁剪 → 识别模型（CRNN / SVTR）。</p><h3 id="难点与策略" tabindex="-1"><a class="header-anchor" href="#难点与策略"><span>难点与策略</span></a></h3><table><thead><tr><th>环节</th><th>风险</th><th>对策</th></tr></thead><tbody><tr><td>多边形裁剪</td><td>仿射失真</td><td>统一仿射矩阵 + padding</td></tr><tr><td>长短文本差异</td><td>序列长度不均</td><td>动态 Batch 分组（长度分桶）</td></tr><tr><td>识别延迟</td><td>串行处理</td><td>检测与上一批识别并行</td></tr><tr><td>字典映射</td><td>乱码/对齐</td><td>固定 vocab + 版本号</td></tr></tbody></table><h3 id="ctc-解码" tabindex="-1"><a class="header-anchor" href="#ctc-解码"><span>CTC 解码</span></a></h3><p>贪心：移除重复与 blank；大规模需 Beam Search（权衡性能）。</p><h2 id="nlp-bert-推理优化" tabindex="-1"><a class="header-anchor" href="#nlp-bert-推理优化"><span>NLP：BERT 推理优化</span></a></h2><h3 id="序列长度策略" tabindex="-1"><a class="header-anchor" href="#序列长度策略"><span>序列长度策略</span></a></h3><ol><li>静态最大长度（简单，浪费算力）。</li><li>Bucketing：按输入长短分类（32/64/128/256），多 OM。</li><li>动态 shape：需评估内存分配抖动；提前预热各常见长度。</li></ol><h3 id="fp16-注意点" tabindex="-1"><a class="header-anchor" href="#fp16-注意点"><span>FP16 注意点</span></a></h3><p>LayerNorm/Softmax 数值范围敏感；若发现精度下降：保持部分算子 FP32（通过混合精度策略或模型修改）。</p><h3 id="性能指标" tabindex="-1"><a class="header-anchor" href="#性能指标"><span>性能指标</span></a></h3><p>tokens/s、avg_latency_ms（batch=1 与 batch&gt;1）、内存占用；观察自注意力占比，必要时进行剪枝（去除冗余 head）或蒸馏。</p><h2 id="多模型-pipeline-串联" tabindex="-1"><a class="header-anchor" href="#多模型-pipeline-串联"><span>多模型 Pipeline 串联</span></a></h2><p>案例：检测 → 裁剪 → 分类。</p><table><thead><tr><th>Stage</th><th>输入/输出</th><th>并行策略</th><th>指标采集</th></tr></thead><tbody><tr><td>Detector</td><td>原始帧 → 框</td><td>批处理+单模型</td><td>时延/框数</td></tr><tr><td>Cropper</td><td>帧+框 → Patch 列表</td><td>多线程 CPU</td><td>单 Patch 平均耗时</td></tr><tr><td>Classifier</td><td>Patch → TopK 类别</td><td>合批 (N≤32)</td><td>FPS/准确率</td></tr></tbody></table><h3 id="优化要点" tabindex="-1"><a class="header-anchor" href="#优化要点"><span>优化要点</span></a></h3><ol><li>Buffer 池：重用图像与 Patch 内存，避免频繁 malloc。</li><li>批量裁剪：收集一定数量 Patch 再统一预处理。</li><li>超时控制：某帧超过阈值后续结果丢弃，保持实时性。</li><li>滑窗统计：最近 60s FPS、平均队列深度。</li></ol><h2 id="工程目录与脚本标准" tabindex="-1"><a class="header-anchor" href="#工程目录与脚本标准"><span>工程目录与脚本标准</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>deploy/</span></span>
<span class="line"><span>  classify/</span></span>
<span class="line"><span>    export.py</span></span>
<span class="line"><span>    atc.sh</span></span>
<span class="line"><span>    config.yaml</span></span>
<span class="line"><span>  detect/</span></span>
<span class="line"><span>    export.py</span></span>
<span class="line"><span>    atc.sh</span></span>
<span class="line"><span>  ocr/</span></span>
<span class="line"><span>    export_det.py</span></span>
<span class="line"><span>    export_rec.py</span></span>
<span class="line"><span>    atc_det.sh</span></span>
<span class="line"><span>    atc_rec.sh</span></span>
<span class="line"><span>runtime/</span></span>
<span class="line"><span>  core/acl_session.cpp</span></span>
<span class="line"><span>  preprocess/</span></span>
<span class="line"><span>  postprocess/</span></span>
<span class="line"><span>  pipelines/</span></span>
<span class="line"><span>tests/</span></span>
<span class="line"><span>  data/</span></span>
<span class="line"><span>  benchmark/</span></span>
<span class="line"><span>docs/</span></span>
<span class="line"><span>  model_cards/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>版本归档要求：</p><table><thead><tr><th>产物</th><th>检查点</th></tr></thead><tbody><tr><td>*.om</td><td>与 atc.log hash 对应</td></tr><tr><td>signature.json</td><td>与运行时动态查询一致</td></tr><tr><td>metrics.json</td><td>包含时间戳/commit_sha</td></tr><tr><td>model_card.md</td><td>模型来源/License/精度</td></tr></tbody></table><h2 id="性能基线方法与统计置信" tabindex="-1"><a class="header-anchor" href="#性能基线方法与统计置信"><span>性能基线方法与统计置信</span></a></h2><p>推荐：</p><ol><li>Warmup 5~10 次；</li><li>收集 ≥200 次稳定样本；</li><li>计算 avg, p50, p95, p99；</li><li>计算置信区间：<code>mean ± 1.96 * (std/sqrt(n))</code>；</li><li>记录环境：芯片序列号/温度区间/电源模式/版本矩阵。 差异判定：新版本 avg 降低 &gt;5% 或 p95 上升 &gt;8% 触发报警分析。</li></ol><h2 id="常见问题诊断深度版" tabindex="-1"><a class="header-anchor" href="#常见问题诊断深度版"><span>常见问题诊断深度版</span></a></h2><table><thead><tr><th>问题</th><th>表现</th><th>诊断步骤</th><th>修复</th></tr></thead><tbody><tr><td>输出全 0</td><td>logits 恒定</td><td>Dump 中间 tensor</td><td>校验预处理/权重损坏</td></tr><tr><td>检测框偏移</td><td>坐标不准</td><td>可视化缩放/Pad 参数</td><td>修正 letterbox 逆变换</td></tr><tr><td>OCR 乱码</td><td>字符错位</td><td>对比 index→char 映射</td><td>统一 vocab &amp; 排序</td></tr><tr><td>BERT 性能差</td><td>tokens/s 低</td><td>分析长度分布</td><td>分桶/裁剪长度</td></tr><tr><td>Pipeline 堵塞</td><td>帧延迟增长</td><td>监控队列深度</td><td>降帧/扩线程池</td></tr><tr><td>内存持续上涨</td><td>long run OOM</td><td>内存快照/工具</td><td>释放缓存/池化</td></tr></tbody></table><h2 id="章节小结" tabindex="-1"><a class="header-anchor" href="#章节小结"><span>章节小结</span></a></h2><p>本章提供四类典型任务部署详解，并抽象了跨任务可复用的脚手架与性能度量方法。重点在于“输入契约统一”、“阶段解耦”、“可观察性内建”。掌握后可进入性能与算子优化专题。</p><h2 id="实践任务" tabindex="-1"><a class="header-anchor" href="#实践任务"><span>实践任务</span></a></h2><ol><li>部署 ResNet50：输出 Top5 及概率、提交 metrics.json。</li><li>部署 YOLOv5s：5 张测试图片生成可视化结果（描述框坐标与类别统计）。</li><li>构建 OCR 双模型流水线：统计单帧平均文本块数 + 平均识别耗时。</li><li>BERT：对 3 组长度(32/64/128) 测 tokens/s 与时延差异，生成对比表。</li><li>Pipeline 检测→分类：实现批裁剪 + Buffer 池，比较优化前后平均时延下降百分比。</li></ol>`,58)]))}const p=t(l,[["render",d],["__file","chapter4.html.vue"]]),c=JSON.parse('{"path":"/book/chapter4.html","title":"第4讲：典型模型部署实践","lang":"zh-cn","frontmatter":{"title":"第4讲：典型模型部署实践","author":["周贤中"],"date":"2025-09-04T00:00:00.000Z","subject":"Markdown","keywords":["模型部署","分类","检测","OCR","NLP","Pipeline","Benchmark"],"lang":"zh-cn"},"headers":[{"level":2,"title":"章节总览","slug":"章节总览","link":"#章节总览","children":[]},{"level":2,"title":"统一部署工作流与契约化","slug":"统一部署工作流与契约化","link":"#统一部署工作流与契约化","children":[]},{"level":2,"title":"图像分类：ResNet / MobileNet","slug":"图像分类-resnet-mobilenet","link":"#图像分类-resnet-mobilenet","children":[{"level":3,"title":"模型导出","slug":"模型导出","link":"#模型导出","children":[]},{"level":3,"title":"预处理一致性","slug":"预处理一致性","link":"#预处理一致性","children":[]},{"level":3,"title":"转换要点","slug":"转换要点","link":"#转换要点","children":[]},{"level":3,"title":"推理后处理","slug":"推理后处理","link":"#推理后处理","children":[]},{"level":3,"title":"性能采集","slug":"性能采集","link":"#性能采集","children":[]}]},{"level":2,"title":"目标检测：YOLO / FasterRCNN","slug":"目标检测-yolo-fasterrcnn","link":"#目标检测-yolo-fasterrcnn","children":[{"level":3,"title":"输入尺寸与 Letterbox","slug":"输入尺寸与-letterbox","link":"#输入尺寸与-letterbox","children":[]},{"level":3,"title":"多输出解析","slug":"多输出解析","link":"#多输出解析","children":[]},{"level":3,"title":"NMS 实现决策","slug":"nms-实现决策","link":"#nms-实现决策","children":[]},{"level":3,"title":"动态尺度支持","slug":"动态尺度支持","link":"#动态尺度支持","children":[]}]},{"level":2,"title":"OCR：文本检测 + 识别 Pipeline","slug":"ocr-文本检测-识别-pipeline","link":"#ocr-文本检测-识别-pipeline","children":[{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"难点与策略","slug":"难点与策略","link":"#难点与策略","children":[]},{"level":3,"title":"CTC 解码","slug":"ctc-解码","link":"#ctc-解码","children":[]}]},{"level":2,"title":"NLP：BERT 推理优化","slug":"nlp-bert-推理优化","link":"#nlp-bert-推理优化","children":[{"level":3,"title":"序列长度策略","slug":"序列长度策略","link":"#序列长度策略","children":[]},{"level":3,"title":"FP16 注意点","slug":"fp16-注意点","link":"#fp16-注意点","children":[]},{"level":3,"title":"性能指标","slug":"性能指标","link":"#性能指标","children":[]}]},{"level":2,"title":"多模型 Pipeline 串联","slug":"多模型-pipeline-串联","link":"#多模型-pipeline-串联","children":[{"level":3,"title":"优化要点","slug":"优化要点","link":"#优化要点","children":[]}]},{"level":2,"title":"工程目录与脚本标准","slug":"工程目录与脚本标准","link":"#工程目录与脚本标准","children":[]},{"level":2,"title":"性能基线方法与统计置信","slug":"性能基线方法与统计置信","link":"#性能基线方法与统计置信","children":[]},{"level":2,"title":"常见问题诊断深度版","slug":"常见问题诊断深度版","link":"#常见问题诊断深度版","children":[]},{"level":2,"title":"章节小结","slug":"章节小结","link":"#章节小结","children":[]},{"level":2,"title":"实践任务","slug":"实践任务","link":"#实践任务","children":[]}],"git":{"createdTime":1752741756000,"updatedTime":1758457965000,"contributors":[{"name":"zhouxzh","username":"zhouxzh","email":"zhouxzh@gdut.edu.cn","commits":2,"url":"https://github.com/zhouxzh"},{"name":"idsefa","username":"idsefa","email":"hhc92611@gmail.com","commits":1,"url":"https://github.com/idsefa"},{"name":"Xianzhong Zhou","username":"Xianzhong Zhou","email":"zhouxzh@gdut.edu.cn","commits":1,"url":"https://github.com/Xianzhong Zhou"}]},"readingTime":{"minutes":5.28,"words":1583},"filePathRelative":"book/chapter4.md","localizedDate":"2025年9月4日"}');export{p as comp,c as data};
